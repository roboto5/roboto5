import dev.robocode.tankroyale.botapi.*;
import dev.robocode.tankroyale.botapi.events.*;

// ------------------------------------------------------------------
// A3Bot
// ------------------------------------------------------------------
// A sample bot original made for Robocode by Mathew Nelson.
// Ported to Robocode Tank Royale by Flemming N. Larsen.
//
// Probably the first bot you will learn about.
// Moves in a seesaw motion, and spins the gun around at each end.
// ------------------------------------------------------------------
//public class A3Bot extends Bot {
//    double moveAmount;
//    double x1;
//    double x2;
//    double y1;
//    double y2;
//
//    // The main method starts our bot
//    public static void main(String[] args) {
//        new A3Bot().start();
//    }
//
//    // Constructor, which loads the bot config file
//    A3Bot() {
//        super(BotInfo.fromFile("A3Bot.json"));
//    }
//
//    // Called when a new round is started -> initialize and do some movement
//    @Override
//    public void run() {
//        setBodyColor(Color.PURPLE);
//        setTurretColor(Color.TEAL);
//        setRadarColor(Color.PURPLE);
//        setBulletColor(Color.RED);
//        setScanColor(Color.PURPLE);
//
//        moveAmount = Math.max(getArenaWidth(), getArenaHeight());
//
//        // turn to face a wall.
//        // `getDirection() % 90` means the remainder of getDirection() divided by 90.
//        turnRight(getDirection() % 90);
//        forward(moveAmount);
//        turnRight(90);
//        turnGunRight(90);
//        int tmp=0;
//
//        while (isRunning()) {
//            while (tmp<moveAmount){
//                turnGunLeft(360);
//                forward(25);
//                tmp+=25;
//            }
//            turnRight(180);
//            turnGunRight(180);
//            tmp=0;
//        }
//    }
//
//
//    @Override
//    public void onScannedBot(ScannedBotEvent e) {
////        forward(25);
////        turnGunRight(65);
//        if(x1){
//            x2=e.getX();
//            y2=e.getY();
//
//            turnRight(p2-p1);
//            fire(1);
//        } else {
//            x1=e.getX();
//            y1=e.getY();
//        }
//
//    }
//
//    @Override
//    public void onHitBot(HitBotEvent e) {
//        fire(3);
//    }
//
//
//    public void onHitBullet(BulletHitBulletEvent e) {
////        var bearing = calcBearing(e.getBullet().getDirection());
////        turnLeft(90-bearing);
//        forward(25);
//        turnGunRight(65);
//        fire(1);
//    }
//
//    // We were hit by a bullet -> turn perpendicular to the bullet
//    @Override
//    public void onHitByBullet(HitByBulletEvent e) {
//        // Calculate the bearing to the direction of the bullet
//        var bearing = calcBearing(e.getBullet().getDirection());
////
////        // Turn 90 degrees to the bullet direction based on the bearing
//        turnGunRight(bearing);
//        fire(1);
//        turnRight(getDirection() % 90);
//    }
//}

public class A3Bot extends Bot {

    int turnDirection = 1; // clockwise (-1) or counterclockwise (1)

    // The main method starts our bot
    public static void main(String[] args) {
        new RamFire().start();
    }

    // Constructor, which loads the bot config file
    RamFire() {
        super(BotInfo.fromFile("RamFire.json"));
    }

    // Called when a new round is started -> initialize and do some movement
    @Override
    public void run() {
        // Set colors
        setBodyColor(Color.fromHex("999"));   // lighter gray
        setTurretColor(Color.fromHex("888")); // gray
        setRadarColor(Color.fromHex("666"));  // dark gray

        while (isRunning()) {
            turnLeft(5 * turnDirection);
        }
    }

    // We scanned another bot -> go ram it
    @Override
    public void onScannedBot(ScannedBotEvent e) {
        turnToFaceTarget(e.getX(), e.getY());

        var distance = distanceTo(e.getX(), e.getY());
        forward(distance + 5);

        rescan(); // Might want to move forward again!
    }

    // We have hit another bot -> turn to face bot, fire hard, and ram it again!
    @Override
    public void onHitBot(HitBotEvent e) {
        turnToFaceTarget(e.getX(), e.getY());

        // Determine a shot that won't kill the bot...
        // We want to ram him instead for bonus points
        if (e.getEnergy() > 16) {
            fire(3);
        } else if (e.getEnergy() > 10) {
            fire(2);
        } else if (e.getEnergy() > 4) {
            fire(1);
        } else if (e.getEnergy() > 2) {
            fire(.5);
        } else if (e.getEnergy() > .4) {
            fire(.1);
        }
        forward(40); // Ram him again!
    }

    // Method that turns the bot to face the target at coordinate x,y, but also sets the
    // default turn direction used if no bot is being scanned within in the run() method.
    private void turnToFaceTarget(double x, double y) {
        var bearing = bearingTo(x, y);
        if (bearing >= 0) {
            turnDirection = 1;
        } else {
            turnDirection = -1;
        }
        turnLeft(bearing);
    }

    @Override
    public void onHitByBullet(HitByBulletEvent e) {
        turnLeft(5 * turnDirection);
        fire(1);
    }
}